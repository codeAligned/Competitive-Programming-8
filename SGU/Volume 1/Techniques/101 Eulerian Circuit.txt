- Eulerian Cycle: The path that visits every edge once and only once before returning to the initial vertex.
- Eulerian Path: The path that visits each edge once and only once.
- Eulerian Graph: A graph that has at least 1 Eulerian cycle.
- Semi-Eulerian Graph: A graph that does not have an Eulerian cycle, but at least one Eulerian Path.

- Undirected Eulerian Graph:
	A undirected graph is an Eulerian graph if and only if:
		- It is connected (do not consider vertices with a degree of 0, because they do not affect the Eulerian cycle or Path).
		- All vertices have an even degree.
	A undirected graph is a Semi-Eulerian graph if and only if:
		- It is connected
		- All but 2 vertices have an even degree.
		- The 2 vertices have an odd degree and must be the starting and ending point of the Eulerian path.

	Proof:
		- Because on any vertex, an Eulerian path or cycle need an equal amount of entering edges and exiting edges (enter == exit), entering edges + exiting edges must be even (even + even = even, odd + odd = even).
		- Because edges of a vertex add up to the degree of the vertex, the degree of the vertex must be even.

- Directed Eulerian Graph:
	A directed graph is an Eulerian graph if and only if:
		- The original diagram (first change all directed path into undirected path, do not consider vertex with a degree of 0) is connected.
		- Entering degree == exiting degree.
		- All vertices have the same amount of entering and exiting degrees.
	The directed graph is a Semi-Eulerian graph if and only if:
		- The original diagram is connected.
		- Entering degree == exiting degree.
		- All but 2 vertices have the same amount of entering and exiting degrees.
		- One of the 2 vertices have an entering degree that is 1 less than the exiting degree, making it the starting point for Eulerian path.
		- The other vertex have an entering degree that is 1 more than the exiting degree, making it the ending point for the Eulerian path.

	Proof:
		- Same as Undirected Eulerian Graph's proof.

- Fleury's algorithm:
	- Inefficient. Ideal Time Complexity of O(|E|), but factoring in detecting bridges would require a time of O(|E|^2).
	- Consider a graph known to have all edges in the same component and at most two vertices of odd degree. The algorithm starts at a vertex of odd degree, or, if the graph has none, it starts with an arbitrarily chosen vertex. At each step it chooses the next edge in the path to be one whose deletion would not disconnect the graph, unless there is no such edge, in which case it picks the remaining edge left at the current vertex. It then moves to the other endpoint of that vertex and deletes the chosen edge. At the end of the algorithm there are no edges left, and the sequence from which the edges were chosen forms an Eulerian cycle if the graph has no vertices of odd degree, or an Eulerian trail if there are exactly two vertices of odd degree.
	- Abstract: Start odd vertex, find valid bridge, move to next vertex, repeat until all edges covered.

	- Note: Since recursion likely goes into stack overflow with huge amount of edges, we can use while loops to be safe.
	C++ Example (Graphic g3 example, prints the path):
		#include <iostream>
		#include <string.h>
		#include <algorithm>
		#include <list>
		using namespace std;
 
		// A class that represents an undirected graph, the general idea.
		class Graph{
  			int V;    // No. of vertices
  			list<int> *adj;    // A dynamic array of adjacency lists

			public:
    			// Constructor and destructor
  				Graph(int V){
  					this->V = V;
  					adj = new list<int>[V];
  				}
  				~Graph(){
  					delete [] adj;
  				}

          			// Graphical g3 example:
          			//  ___________________
          			// |       V = 5       |
          			// |       list:       |
          			// |[0] [1] [2] [3] [4]|
          			// | 1   0   0   0   3 |
          			// | 2   2   1   4   2 |
          			// | 3   3   3   2     |
          			// |         4   1     |
          			//  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

  				// functions to add and remove edge
  				void addEdge(int u, int v){
  					adj[u].push_back(v);
  					adj[v].push_back(u); //If there is a direction, make sure u --> v and ignore this line.
  				}
  				void rmvEdge(int u, int v);
 
  				// Methods to print Eulerian tour
  				void printEulerTour();
  				void printEulerUtil(int s);
 
 				// This function returns count of vertices reachable from v. It does DFS
  				int DFSCount(int v, bool visited[]);
 
  				// Utility function to check if edge u-v is a valid next edge in Eulerian trail or circuit
  				bool isValidNextEdge(int u, int v);
		};
 
		/* The main function that print Eulerian Trail. It first finds an odd degree vertex (if there is any) and then calls printEulerUtil() to print the path */
		void Graph::printEulerTour(){
  			// Find a vertex with odd degree
  			int u = 0;
  			for (int i = 0; i < V; i++)
      			if (adj[i].size() & 1){
      				u = i;
      				break;
      			}
 
  			// Print tour starting from oddv
  			printEulerUtil(u);
  			cout << endl;

  			// Graphic g3 example:
  			//
  			// E = Even, O = Odd
  			//  ___________________
  			// | O   O   E   E   E |
  			// |[0] [1] [2] [3] [4]|
  			// | 1   0   0   0   3 |
  			// | 2   2   1   4   2 |
  			// | 3   3   3   2     |
  			// |         4   1     |
  			//  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  			//  Basically look at size of list for every vertex
  			//  Sends index to start with
		}
 
		// Print Euler tour starting from vertex u
		void Graph::printEulerUtil(int u){
  			// Recur for all the vertices adjacent to this vertex
  			list<int>::iterator i;
  			for (i = adj[u].begin(); i != adj[u].end(); ++i){
      			int v = *i;
 
      			// If edge u-v is not removed and it's a a valid next edge
      			if (v != -1 && isValidNextEdge(u, v)){
          			cout << u << "-" << v << "  ";
          			rmvEdge(u, v);
          			printEulerUtil(v);
      			}
  			}

  			//	Graphic g3 example:
  			//  
  			//	u = 0;
  			//  ___________________
  			// |                   |
  			// |[0] [1] [2] [3] [4]|
  			// | 1   0   0   0   3 |
  			// | 2   2   1   4   2 |
  			// | 3   3   3   2     |
  			// |         4   1     |
  			//  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  			//  Because 1 of [0] is not -1, and sent to ValidNextEdge --> true
  			//  Print "0 - 1"
  			//  Now Replace 1 of [0] with -1, 0 of [1] with -1
  			//  ___________________
  			// |                   |
  			// |[0] [1] [2] [3] [4]|
  			// |-1  -1   0   0   3 |
  			// | 2   2   1   4   2 |
  			// | 3   3   3   2     |
  			// |         4   1     |
  			//  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  			//  Sends 1 to the next recursion and repeat with u = 1
		}
 
		// The function to check if edge u-v can be considered as next edge in Euler Tout
		bool Graph::isValidNextEdge(int u, int v){
			// The edge u-v is valid in one of the following two cases:
 
  			// 1) If v is the only adjacent vertex of u
  			int count = 0;  // To store count of adjacent vertices
  			list<int>::iterator i;
  			for (i = adj[u].begin(); i != adj[u].end(); ++i)
     			if (*i != -1)
        			count++;
  			if (count == 1)
    			return true;
 
 
  			// 2) If there are multiple adjacents, then u-v is not a bridge
  			// Do following steps to check if u-v is a bridge
 
  			// 2.a) count of vertices reachable from u
  			bool visited[V];
  			memset(visited, false, V); //Fills all visited with false
  			int count1 = DFSCount(u, visited);
 
  			// 2.b) Remove edge (u, v) and after removing the edge, count vertices reachable from u
  			rmvEdge(u, v);
  			memset(visited, false, V);
  			int count2 = DFSCount(u, visited);
 
  			// 2.c) Add the edge back to the graph
  			addEdge(u, v);
 
  			// 2.d) If count1 is greater, then edge (u, v) is a bridge that disconnects the graph
  			return (count1 > count2)? false: true;
		}
 
		// This function removes edge u-v from graph.  It removes the edge by
		// replacing adjcent vertex value with -1.
		void Graph::rmvEdge(int u, int v){
  			// Find v in adjacency list of u and replace it with -1
  			list<int>::iterator iv = find(adj[u].begin(), adj[u].end(), v);
  			*iv = -1;
 
  			// Find u in adjacency list of v and replace it with -1
  			list<int>::iterator iu = find(adj[v].begin(), adj[v].end(), u);
  			*iu = -1;
		}
 
		// A DFS based function to count reachable vertices from v
		int Graph::DFSCount(int v, bool visited[]){
  			// Mark the current node as visited
  			visited[v] = true;
  			int count = 1;
 
  			// Recur for all vertices adjacent to this vertex
  			list<int>::iterator i;
  			for (i = adj[v].begin(); i != adj[v].end(); ++i)
      			if (*i != -1 && !visited[*i])
          			count += DFSCount(*i, visited);
 
  			return count;
		}
 
		// Driver program to test above function
		int main(){
  			// Let us first create and test graphs shown in above figure
  			Graph g1(4);
  			g1.addEdge(0, 1);
  			g1.addEdge(0, 2);
  			g1.addEdge(1, 2);
  			g1.addEdge(2, 3);
  			g1.printEulerTour();
 
  			Graph g2(3);
  			g2.addEdge(0, 1);
  			g2.addEdge(1, 2);
  			g2.addEdge(2, 0);
  			g2.printEulerTour();
 
  			Graph g3(5);
  			g3.addEdge(1, 0);
  			g3.addEdge(0, 2);
  			g3.addEdge(2, 1);
  			g3.addEdge(0, 3);
  			g3.addEdge(3, 4);
  			g3.addEdge(3, 2);
  			g3.addEdge(3, 1);
  			g3.addEdge(2, 4);
  			g3.printEulerTour();
 
  			return 0;
		}

		Output:
			2-0  0-1  1-2  2-3
			0-1  1-2  2-0
			0-1  1-2  2-0  0-3  3-4  4-2  2-3  3-1

- Hierholzer's algorithm:
	- More Efficient than Fluery's algorithm.
	- Choose any starting vertex v, and follow a trail of edges from that vertex until returning to v. It is not possible to get stuck at any vertex other than v, because the even degree of all vertices ensures that, when the trail enters another vertex w there must be an unused edge leaving w. The tour formed in this way is a closed tour, but may not cover all the vertices and edges of the initial graph.
	- As long as there exists a vertex u that belongs to the current tour but that has adjacent edges not part of the tour, start another trail from u, following unused edges until returning to u, and join the tour formed in this way to the previous tour.
	- By using a data structure such as a doubly linked list to maintain the set of unused edges incident to each vertex, to maintain the list of vertices on the current tour that have unused edges, and to maintain the tour itself, the individual operations of the algorithm (finding unused edges exiting each vertex, finding a new starting vertex for a tour, and connecting two tours that share a vertex) may be performed in constant time each, so the overall algorithm takes linear time, O(|E|).
	- Abstract: DFS a loop, store it, DFS another loop, replace the first loop's index that's same as the latter loop's first index, repeat until no more loops. Example: first loop 0 1 3 5 7 0, second loop 3 6 8 9 3, combine into 0 1 3 6 8 9 3 5 7 0.

- More information:
	- http://blog.chinaunix.net/uid-26380419-id-3164913.html
	- http://www.cnblogs.com/tanhehe/archive/2013/02/22/2921864.html
	- https://en.wikipedia.org/wiki/Eulerian_path
	- https://www.cs.usfca.edu/~galles/cs245S08/DFS.pdf
	- http://www.geeksforgeeks.org/fleurys-algorithm-for-printing-eulerian-path/
